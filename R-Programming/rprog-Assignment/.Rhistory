}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
head(rank("heart attack",10),10)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
#New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#print(New_Data[,1])
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
cNum<-(FirstValue + (num -1))
CountSplit<-SplitData[,2]
print(CountSplit)
#print(head(SData[,1:3],20))
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
for(i in 1:length(FirstValue)){
print(i)
if(num > CountSplit[i] ){
Fnum<-"NA"
#append(Fnum,NA,after = length(Fnum))
}
else{
#Fnum<-as.numeric(cNum)
append(Fnum,cNum[i],after = length(Fnum))
#print(Fnum)
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
head(rank("heart attack",10),10)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
#New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#print(New_Data[,1])
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
cNum<-(FirstValue + (num -1))
CountSplit<-SplitData[,2]
print(CountSplit)
#print(head(SData[,1:3],20))
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
for(i in 1:length(FirstValue)){
print(i)
if(num > CountSplit[i] ){
Fnum <- character()
append(Fnum,NA,after = length(Fnum))
}
else{
#Fnum<-as.numeric(cNum)
append(Fnum,cNum[i],after = length(Fnum))
#print(Fnum)
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
head(rank("heart attack",10),10)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
#New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#print(New_Data[,1])
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
cNum<-(FirstValue + (num -1))
CountSplit<-SplitData[,2]
print(CountSplit)
#print(head(SData[,1:3],20))
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
for(i in 1:length(FirstValue)){
print(i)
if(num > CountSplit[i] ){
Fnum[i] = NA
#append(Fnum,NA,after = length(Fnum))
}
if{
Fnum[i]=cNum
#Fnum<-as.numeric(cNum)
#append(Fnum,cNum[i],after = length(Fnum))
#print(Fnum)
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
#New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#print(New_Data[,1])
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
cNum<-(FirstValue + (num -1))
CountSplit<-SplitData[,2]
print(CountSplit)
#print(head(SData[,1:3],20))
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
for(i in 1:length(FirstValue)){
if(num > CountSplit[i] ){
Fnum[i] = NA
#append(Fnum,NA,after = length(Fnum))
}
if(num < CountSplit[i]){
Fnum[i]=cNum
#Fnum<-as.numeric(cNum)
#append(Fnum,cNum[i],after = length(Fnum))
#print(Fnum)
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
head(rank("heart attack",10),10)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
#New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#print(New_Data[,1])
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
cNum<-(FirstValue + (num -1))
CountSplit<-SplitData[,2]
print(CountSplit)
#print(head(SData[,1:3],20))
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
Fnum <- NULL
for(i in 1:length(FirstValue)){
if(num > CountSplit[i] ){
Fnum[i] = NA
#append(Fnum,NA,after = length(Fnum))
}
if(num < CountSplit[i]){
Fnum[i]=cNum
#Fnum<-as.numeric(cNum)
#append(Fnum,cNum[i],after = length(Fnum))
#print(Fnum)
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
head(rank("heart attack",10),10)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
#New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#print(New_Data[,1])
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
CountSplit<-SplitData[,2]
print(CountSplit)
#print(head(SData[,1:3],20))
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
Fnum <- NULL
for(i in 1:length(FirstValue)){
if(num > CountSplit[i] ){
Fnum[i] = NA
#append(Fnum,NA,after = length(Fnum))
}
if(num < CountSplit[i]){
Fnum[i]=(FirstValue[i] + (num -1))
#Fnum<-as.numeric(cNum)
#append(Fnum,cNum[i],after = length(Fnum))
#print(Fnum)
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
# return(as.character(SData[num,1:2]))
}
head(rank("heart attack",10),10)
head(rank("heart attack",20),10)
head(rank("heart attack",20),10)
tail(rank("pneumonia","worst"),3)
tail(rank("heart failure"),10)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
SplitData<- aggregate(SData,list(SData$State),length)
CountSplit<-SplitData[,2]
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
Fnum <- NULL
for(i in 1:length(FirstValue)){
if(num > CountSplit[i] ){
Fnum[i] = NA
}
else if(num < CountSplit[i]){
Fnum[i]=(FirstValue[i] + (num -1))
}
}
}
print(Fnum)
return(SData[Fnum,1:2])
}
head(rank("heart attack",20),10)
## This function is to calculate the lower 30days morality rate in state wise.
best <- function(state,outcome) {
# This function is used to check the Valid state and Outcome.
if(!any(state == state.abb) ) stop("invalid State")
else if(!any(outcome == c("heart attack" ,"heart failure","pneumonia")))  stop("invalid Outcome")
#Reads the csv file into dataframe and Creating the subset for the given state.
Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
New_Data<-subset(Data, Data[,2]==state )
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
#Getting the hospital name for minimum value in the lower 30day outcome column
HospitalName <- New_Data[which(outcome_Col == min(outcome_Col, na.rm = TRUE)), 1]
#Sorting the Hospital name by alphabhatical
if (length(HospitalName)>1){
Sort_HospitalName <-  sort(HospitalName)
return(Sort_HospitalName[1])
}
return(as.character(HospitalName))
}
best("SC","heart attack")
best("NY","pneumonia")
best("AK","pneumonia")
rankhospital <- function(state, outcome, num) {
# This function is used to check the Valid state and Outcome.
if(!any(state == state.abb) ) stop("invalid State")
else if(!any(outcome == c("heart attack" ,"heart failure","pneumonia")))  stop("invalid Outcome")
#Reads the csv file into dataframe and Creating the subset for the given state.
Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
New_Data<-subset(Data, Data[,2]==state )
#str(New_Data)
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
# Ordering the 30 day morality rate
SData <- New_Data[order(outcome_Col,New_Data[,1], na.last = NA ),]
#Getting index related to outcome.
num <- if(num == "best") 1
else if (num == "worst") nrow(SData)
else if (is.numeric(num))num
return(as.character(SData[num,1]))
}
rankhospital("NC","heart attack","worst")
rankhospital("WA","heart attack",7)
rankhospital("TX","pneumonia",10)
rankhospital("NY","heart attack",7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rank <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
# Ordering the 30 day morality rate in state-wise
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
#Finding the First and last index of record in each state
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
#Getting no.of.records in each state.
SplitData<- aggregate(SData,list(SData$State),length)
CountSplit<-SplitData[,2]
#Getting index related to outcome.
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
#Checking the num ranking in data. If num ranking does not exist then returning NA to that index.
Fnum <- NULL
for(i in 1:length(FirstValue)){
if(num > CountSplit[i] ){
Fnum[i] = NA
}
else if(num < CountSplit[i]){
Fnum[i]=(FirstValue[i] + (num -1))
}
}
}
return(SData[Fnum,1:2])
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rank("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num="best") {
#Reads the csv file into dataframe and Creating the subset for the given state.
New_Data <- read.csv("outcome-of-care-measures.csv")[ ,c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
# Getting the required column for related outcome.
if (outcome == "heart attack"  )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,3])))
}
else if(outcome == "heart failure" )
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,4])))
}
else if(outcome == "pneumonia")
{
outcome_Col<-suppressWarnings(as.numeric(as.character(New_Data[,5])))
}
# Ordering the 30 day morality rate in state-wise
SData <- New_Data[order(New_Data[,2],outcome_Col,New_Data[,1],na.last = NA  ),]
#Finding the First and last index of record in each state
FirstValue <- which((!duplicated(SData[,2])))
LastValue <-  which(!duplicated(SData[,2],fromLast=TRUE))
#Getting no.of.records in each state.
SplitData<- aggregate(SData,list(SData$State),length)
CountSplit<-SplitData[,2]
#Getting index related to outcome.
if(num == "best") Fnum <- FirstValue
else if (num == "worst") Fnum <- LastValue
else if (is.numeric(num))
{
#Checking the num ranking in data. If num ranking does not exist then returning NA to that index.
Fnum <- NULL
for(i in 1:length(FirstValue)){
if(num > CountSplit[i] ){
Fnum[i] = NA
}
else if(num < CountSplit[i]){
Fnum[i]=(FirstValue[i] + (num -1))
}
}
}
return(SData[Fnum,1:2])
}
r <- rankall("heart attack", 4)
r
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
r
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
r
as.character(subset(r, state == "NV")$hospital)
